{"version":3,"sources":["core/http.js"],"names":["HttpClient","client","baseUrl","_client","_baseUrl","path","options","params","authenticated","token","headers","Headers","Error","fetch","encode","then","response","json","body","JSON","stringify","method"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;IAGqBA,U;;;AACjB,sBAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AACzB,SAAKC,OAAL,GAAeF,MAAf;AACA,SAAKG,QAAL,GAAgBF,WAAW,iCAA3B;AACH;;;;wBAEGG,I,EAAMC,O,EAAS;AACfA,gBAAU,oBAAM;AACZC,gBAAQ,EADI;AAGZC,uBAAe,KAHH;AAIZC,eAAO,KAAKN,OAAL,CAAaM;AAJR,OAAN,EAKPH,WAAW,EALJ,CAAV,CADe,CAQf;;AACA,UAAII,UAAU,IAAIC,OAAJ,EAAd;;AAEA,UAAGL,QAAQE,aAAX,EAA0B;AACtB,YAAG,CAAC,wBAAUF,QAAQG,KAAlB,CAAJ,EAA8B;AAC1B,gBAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAEDF,gBAAQ,eAAR,IAA2B,WAAWJ,QAAQG,KAA9C;AACH,OAjBc,CAmBf;;;AACA,aAAOI,MAAM,KAAKT,QAAL,GAAgBC,IAAhB,GAAuB,GAAvB,GAA6B,qBAAYS,MAAZ,CAAmBR,QAAQC,MAA3B,CAAnC,EAAuE;AAC1EG,iBAASA;AADiE,OAAvE,EAEJK,IAFI,CAEC,UAASC,QAAT,EAAmB;AACvB;AACA,eAAOA,SAASC,IAAT,EAAP;AACH,OALM,CAAP;AAMH;;;yBAEIZ,I,EAAMC,O,EAAS;AAChBA,gBAAU,oBAAM;AACZY,cAAM,IADM;AAGZV,uBAAe,KAHH;AAIZC,eAAO,KAAKN,OAAL,CAAaM;AAJR,OAAN,EAKPH,WAAW,EALJ,CAAV,CADgB,CAQhB;;AACA,UAAG,wBAAUA,QAAQY,IAAlB,CAAH,EAA4B;AACxBZ,gBAAQY,IAAR,GAAeC,KAAKC,SAAL,CAAed,QAAQY,IAAvB,CAAf;AACH,OAXe,CAahB;;;AACA,UAAIR,UAAU,EAAd;;AAEA,UAAGJ,QAAQE,aAAX,EAA0B;AACtB,YAAG,CAAC,wBAAUF,QAAQG,KAAlB,CAAJ,EAA8B;AAC1B,gBAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAEDF,gBAAQ,eAAR,IAA2B,WAAWJ,QAAQG,KAA9C;AACH,OAtBe,CAwBhB;;;AACA,aAAOI,MAAM,KAAKT,QAAL,GAAgBC,IAAtB,EAA4B;AAC/BgB,gBAAQ,MADuB;AAE/BH,cAAMZ,QAAQY,IAFiB;AAI/BR,iBAAS,IAAIC,OAAJ,CAAYD,OAAZ;AAJsB,OAA5B,EAKJK,IALI,CAKC,UAASC,QAAT,EAAmB;AACvB;AACA,eAAOA,SAASC,IAAT,EAAP;AACH,OARM,CAAP;AASH","file":"http.js","sourcesContent":["import Merge from 'lodash-amd/merge';\r\nimport QueryString from 'querystring';\r\n\r\nimport {isDefined} from './helpers';\r\n\r\n\r\nexport default class HttpClient {\r\n    constructor(client, baseUrl) {\r\n        this._client = client;\r\n        this._baseUrl = baseUrl || 'https://api.listenbrainz.org/1/';\r\n    }\r\n\r\n    get(path, options) {\r\n        options = Merge({\r\n            params: {},\r\n\r\n            authenticated: false,\r\n            token: this._client.token\r\n        }, options || {});\r\n\r\n        // Set request headers\r\n        let headers = new Headers();\r\n\r\n        if(options.authenticated) {\r\n            if(!isDefined(options.token)) {\r\n                throw new Error('Missing required \"token\" parameter');\r\n            }\r\n\r\n            headers['Authorization'] = 'Token ' + options.token;\r\n        }\r\n\r\n        // Send request\r\n        return fetch(this._baseUrl + path + '?' + QueryString.encode(options.params), {\r\n            headers: headers\r\n        }).then(function(response) {\r\n            // TODO check status code\r\n            return response.json();\r\n        });\r\n    }\r\n\r\n    post(path, options) {\r\n        options = Merge({\r\n            body: null,\r\n\r\n            authenticated: false,\r\n            token: this._client.token\r\n        }, options || {});\r\n\r\n        // Encode body to JSON\r\n        if(isDefined(options.body)) {\r\n            options.body = JSON.stringify(options.body);\r\n        }\r\n\r\n        // Set request headers\r\n        let headers = {};\r\n\r\n        if(options.authenticated) {\r\n            if(!isDefined(options.token)) {\r\n                throw new Error('Missing required \"token\" parameter');\r\n            }\r\n\r\n            headers['Authorization'] = 'Token ' + options.token;\r\n        }\r\n\r\n        // Send request\r\n        return fetch(this._baseUrl + path, {\r\n            method: 'POST',\r\n            body: options.body,\r\n\r\n            headers: new Headers(headers)\r\n        }).then(function(response) {\r\n            // TODO check status code\r\n            return response.json();\r\n        });\r\n    }\r\n}\r\n"]}