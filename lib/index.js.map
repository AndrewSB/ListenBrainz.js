{"version":3,"sources":["index.js"],"names":["Client","options","token","http","_interfaces","_constructInterfaces","type","listens","indexOf","Error","Array","isArray","post","authenticated","body","then","payload","result","Object","keys","forEach","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAGaA,M;;;AACT,kBAAYC,OAAZ,EAAqB;AAAA;;AACjBA,cAAU,wBAAUA,OAAV,IAAqBA,OAArB,GAA+B,EAAzC;AAEA,SAAKC,KAAL,GAAaD,QAAQC,KAAR,IAAiB,IAA9B,CAHiB,CAKjB;;AACA,SAAKC,IAAL,GAAY,kBAAe,IAAf,CAAZ,CANiB,CAQjB;;AACA,SAAKC,WAAL,GAAmB,KAAKC,oBAAL,EAAnB;AACH;;;;kCAMaC,I,EAAMC,O,EAAS;AACzB,UAAG,CAAC,wBAAUD,IAAV,CAAD,IAAoB,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoCE,OAApC,CAA4CF,IAA5C,IAAoD,CAA3E,EAA8E;AAC1E,cAAM,IAAIG,KAAJ,CAAU,iDAAV,CAAN;AACH;;AAED,UAAG,CAAC,wBAAUF,OAAV,CAAD,IAAuB,CAACG,MAAMC,OAAN,CAAcJ,OAAd,CAA3B,EAAmD;AAC/C,cAAM,IAAIE,KAAJ,CAAU,oDAAV,CAAN;AACH,OAPwB,CASzB;;;AACA,aAAO,KAAKN,IAAL,CAAUS,IAAV,CAAe,gBAAf,EAAiC;AACpCC,uBAAe,IADqB;AAGpCC,cAAM;AACF,yBAAeR,IADb;AAEF,qBAAWC;AAFT;AAH8B,OAAjC,EAOJQ,IAPI,CAOC,UAASD,IAAT,EAAe;AACnB,YAAG,wBAAUA,IAAV,KAAmB,wBAAUA,KAAKE,OAAf,CAAtB,EAA+C;AAC3C,iBAAOF,KAAKE,OAAZ;AACH;;AAED,eAAO,IAAP;AACH,OAbM,CAAP;AAcH;;;2CAEsB;AAAA;;AACnB,UAAIC,SAAS,EAAb;AAEAC,aAAOC,IAAP,sBAAwBC,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACrCJ,eAAOI,GAAP,IAAc,IAAI,oBAAWA,GAAX,CAAJ,OAAd;AACH,OAFD;AAIA,aAAOJ,MAAP;AACH;;;wBAtCU;AACP,aAAO,KAAKb,WAAL,CAAiB,MAAjB,CAAP;AACH","file":"index.js","sourcesContent":["import HttpClient from './core/http';\nimport Interfaces from './interfaces';\nimport {isDefined} from './core/helpers';\n\n\nexport class Client {\n    constructor(options) {\n        options = isDefined(options) ? options : {};\n\n        this.token = options.token || null;\n\n        // Construct http client\n        this.http = new HttpClient(this);\n\n        // Construct interfaces\n        this._interfaces = this._constructInterfaces();\n    }\n\n    get user() {\n        return this._interfaces['user'];\n    }\n\n    submitListens(type, listens) {\n        if(!isDefined(type) || ['single', 'playing_now', 'import'].indexOf(type) < 0) {\n            throw new Error('Invalid value provided for the \"type\" parameter');\n        }\n\n        if(!isDefined(listens) || !Array.isArray(listens)) {\n            throw new Error('Invalid value provided for the \"listens\" parameter');\n        }\n\n        // Send request\n        return this.http.post('submit-listens', {\n            authenticated: true,\n\n            body: {\n                'listen_type': type,\n                'payload': listens\n            }\n        }).then(function(body) {\n            if(isDefined(body) && isDefined(body.payload)) {\n                return body.payload;\n            }\n\n            return null;\n        });\n    }\n\n    _constructInterfaces() {\n        var result = {};\n\n        Object.keys(Interfaces).forEach((key) => {\n            result[key] = new Interfaces[key](this);\n        });\n\n        return result;\n    }\n}\n"]}